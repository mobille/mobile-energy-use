<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
	xmlns:flex="flare.flex.*" width="800" height="425" 
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
	currentState="MapState" xmlns:local="*" xmlns:components="components.*" 
	xmlns:components1="commentspace.components.*" initialize="{init()}" backgroundGradientAlphas="[1.0, 1.0]" backgroundGradientColors="[#FFFFFF, #FFFFFF]">
	
	<mx:states>
		<mx:State name="MapState" enterState="{loadData(true)}">
			<mx:SetProperty target="{visToggleButton}" name="label" value="Line Chart"/>
			<mx:SetProperty target="{recentLabel}" name="visible" value="true"/>
			<mx:SetProperty target="{recentLabel}" name="includeInLayout" value="true"/>
			<mx:SetProperty target="{inLabel}" name="text" value="near"/>
			<mx:SetProperty target="{label1}" name="visible" value="false"/>
			<mx:SetProperty target="{_dateChooser}" name="visible" value="false"/>
			<mx:SetProperty target="{_dateRangeCombo}" name="visible" value="false"/>
			<mx:SetProperty target="{_dateRangeCombo}" name="includeInLayout" value="false"/>
		</mx:State>
		<mx:State name="LineChartState" enterState="{loadData(true)}">
			<mx:SetStyle target="{_flexVisWrapper}" name="backgroundColor" value="#FFFFFF"/>
			<mx:SetStyle name="backgroundGradientColors" value="[#FFFFFF, #FFFFFF]"/>
			<mx:SetStyle target="{hbox1}" name="horizontalGap" value="2"/>
			<mx:SetProperty target="{_dateRangeCombo}" name="visible" value="true"/>
			<mx:SetProperty target="{_dateRangeCombo}" name="includeInLayout" value="true"/>
		</mx:State>
	</mx:states>
	
	<flex:FlareVis id="_flexVisWrapper" y="35" width="100%" height="100%">
	</flex:FlareVis>	
	
	<mx:HBox width="100%" verticalAlign="middle" y="0" id="hbox1">
		<mx:Spacer/>
		<mx:Label text="Recent" fontSize="17" fontWeight="bold" color="#000000" id="recentLabel" includeInLayout="false" visible="false"/>
		<mx:ComboBox id="_dateRangeCombo" dataProvider="{_dateRanges}" change="{selectDate()}"/>
		<mx:ComboBox id="_resourceCombo" dataProvider="{_resourceTypes}" change="{loadData()}"/>
		<mx:Label text="in" fontSize="17" fontWeight="bold" color="#000000" id="inLabel"/>
		<mx:ComboBox id="_buildingCombo" dataProvider="{_buildingNames}" selectedIndex="1"
			change="{showDistanceBox(_buildingCombo.selectedItem.data == -1);loadData()}"/>
		<mx:HBox id="distanceBox" visible='false' includeInLayout="false">
			<mx:Label text="Distance" fontSize="17"/>
			<mx:HSlider id="distanceSlider" minimum="0" width="80" maximum="3" value="2" allowTrackClick="true" 
				tickInterval="1" change="{loadData()}"/>
		</mx:HBox>
		<mx:Label text="{dateForTop(_selectedDateRange[0])}" fontSize="17" fontWeight="bold" color="#000000" click="{_dateChooser.open()}" id="label1"/>
		<mx:DateField id="_dateChooser"  width="17" displayedYear="2007" displayedMonth="12"/>
	</mx:HBox>

	<mx:Button label="Map" labelPlacement="top" id="visToggleButton" click="{toggleState()}" y="2" right="3"/>

	<components:ControlContainer width="100%" bottom="0">
		<components:subComponents>
			<components:ControlContainer panelName="Data Recording">
				<components:subComponents>
					<components:DataCollectionInput id="dataPane"/>
				</components:subComponents>
			</components:ControlContainer>
			<components:ControlContainer panelName="Comment on Data">
				<components:subComponents>
					<components1:CommentPane width="100%" height="150" id="commentsPane"/>
				</components:subComponents>
			</components:ControlContainer>
		</components:subComponents>
	</components:ControlContainer>
	
	<mx:Canvas id="noDataLabel" horizontalCenter="0" verticalCenter="0">
		<mx:Label text="No Data Available"  fontSize="36" fontWeight="bold" color="#245CFC" horizontalCenter="0"/>
		<mx:Label text="Try a Different Resource, Location, or Time Period"   color="#245CFC" y="40" horizontalCenter="0" fontSize="14"/>
	</mx:Canvas>
	
	<mx:Script>
		<![CDATA[
			import flare.vis.data.DataSprite;
			import flare.vis.operator.label.Labeler;
			import com.modestmaps.mapproviders.yahoo.YahooHybridMapProvider;
			import flare.scale.ScaleType;
			import flare.util.Strings;
			import sensing.Sensor;
			import sqlite.SQLiteHandler;
			import flare.data.DataSchema;
			import commentspace.etc.WebAPIEvent;
			import commentspace.etc.WebAPI;
			import flare.data.DataSet;
			import flare.vis.controls.DragControl;
			import flare.vis.controls.PanZoomControl;
			import flare.vis.operator.encoder.ShapeEncoder;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.FlexEvent;
			import mx.events.DropdownEvent;
			import mx.controls.Alert;
			import mx.formatters.SwitchSymbolFormatter;
			import mx.controls.DateChooser;
			import mx.events.DateChooserEvent;
			import flare.util.Strings;
			import flare.vis.events.TooltipEvent;
			import flare.vis.controls.ControlList;
			import flare.vis.operator.OperatorSequence;
			import flare.vis.operator.OperatorList;
			import mx.collections.ArrayCollection;
			import flare.util.palette.ColorPalette;
			import flare.vis.data.NodeSprite;
			import flare.vis.operator.filter.VisibilityFilter;
			import flare.display.TextSprite;
			import flare.vis.controls.TooltipControl;
			import flare.util.Colors;
			import flare.vis.axis.AxisLabel;
			import flare.vis.operator.encoder.SizeEncoder;
			import flare.vis.operator.encoder.ColorEncoder;
			import flare.vis.operator.layout.AxisLayout;
			import com.modestmaps.core.MapExtent;
			import flare.vis.controls.MapLayoutPanZoomControl;
			import flare.data.DataSource;
			import flare.vis.operator.layout.MapLayout;
			import flare.vis.Visualization;
			import flare.vis.data.Data;
		
			public const MILLISECONDS_PER_DAY:Number = 24*60*60*1000;
		
			//local vars
			protected var _webAPI:WebAPI = new WebAPI();
			protected var _localDB:SQLiteHandler = SQLiteHandler.instance;
			protected var _vis:Visualization;
			protected var _ml:MapLayout;
			
			[Bindable]
			protected var _selectedDateRange:Array = [ {rangeStart: new Date("12/14/2007"), 
							rangeEnd: new Date("12/15/2007")}];
			protected var _currentLocation:Object;
			protected var _initialized:Boolean = false;

			/** 
			 * Toggles between main vis states
			 */			
			protected function toggleState():void{
				currentState = (currentState == "MapState")?"LineChartState":"MapState";
			}		
					
			/**
			 * Load the and setup the application
			 * 
			 */		
			protected function init():void{
				_vis = _flexVisWrapper.visualization;
				_webAPI.converter = "json";
				_webAPI.addEventListener(WebAPIEvent.QUERY_COMPLETE, handleData);
				
				//Listen for changes to the calendar to set the date range
				_dateChooser.dropdown.selectedRanges = _selectedDateRange;
				_dateChooser.addEventListener(CalendarLayoutChangeEvent.CHANGE,selectDate);
				
				//listen for events from the datapane to get sensor updates.
				dataPane.addEventListener(Sensor.DATA_CHANGED, function(e:Event):void{
						
					}); 
			}	
			
			/**
			 * Main data loading method for the application. Loads data from either the local or 
			 * web database and queries for data appropriate to the current visualization.
			 * 
			 */
			protected function loadData(firstRun:Boolean=false):void{
				//hide the "No Data" label
				noDataLabel.visible = false;
				
				//clear the current data
				if(firstRun){
					_vis = new Visualization(new Data());
					_flexVisWrapper.visualization = _vis;
				}
				else{
					while(_vis.data.nodes.length > 0)_vis.data.nodes.removeAt(0);
					_vis.data.clear();
				}  
				
				//call the loading function appropriate to the current state
				if(currentState == "LineChartState"){
					if(firstRun)initLineChart();
					else loadLineData();
				} 
				else if(currentState == "MapState"){
					if(firstRun)initMap();
					else loadMapData();
				} 
				else return;
			}
			
			/**
			 * Loads data for the line chart view.
			 */
			protected function loadLineData():void{
				if(_buildingCombo.selectedItem.data == -1){ //load from local database 
					if(dataPane.gpsData){
						_localDB.getTuples(dataPane.gpsData['latitude'],dataPane.gpsData['longitude'],_selectedDateRange.rangestart, 
							_selectedDateRange.rangeend,_resourceCombo.selectedItem.data, Math.pow(10,distanceSlider.value));
					}
					
				}
				else{ //load from web database
					_webAPI.url = Strings.format("http://voicebox.eecs.berkeley.edu:8090/energydb/readings.json?"+
						"building={0}&resource={1}&startdate={2}&enddate={3}", 
						_buildingCombo.selectedItem.data,
						((_resourceCombo.selectedItem)?_resourceCombo.selectedItem.data:"energy"),
						formatDateForQuery(_selectedDateRange[0].rangeStart as Date),
						formatDateForQuery(_selectedDateRange[0].rangeEnd as Date));
					_webAPI.runQuery();
				}
			}
			
			/**
			* Loads data for the map view
			*/
			protected function loadMapData():void{
				if(_buildingCombo.selectedItem.data == -1){ //load from local database 
					if(dataPane.gpsData){
						_localDB.getTuples(dataPane.gpsData['latitude'],dataPane.gpsData['longitude'],_selectedDateRange.rangestart, 
							_selectedDateRange.rangeend,_resourceCombo.selectedItem.data, Math.pow(10,distanceSlider.value));
					}
					
				}
				else{ //load from web database
					_webAPI.url = "http://voicebox.eecs.berkeley.edu:8090/energydb/current.json";
					_webAPI.runQuery();
				}
			}	
			
			/**
			 * Populates the visualization's data list with new data from a load.
			 */
			protected function handleData(e:Event):void{
				var d:DataSet = e.currentTarget.data;
				while(_vis.data.nodes.length > 0)_vis.data.nodes.removeAt(0); 	
				_vis.data.clear();
				
				for each(var o:Object in d.nodes.data){
					_vis.data.addNode(o);
				} 
				
				//Create edges for line chart if necessary
				if(currentState == "LineChartState")_vis.data.createEdges("data.date");
				
				//If no data was returned, display the no data label
				noDataLabel.visible = (!_vis.data.nodes || _vis.data.nodes.length == 0);
				
				updateVis();
			}
			
			/**
			 * Set up the visualization as a line chart.
			 * 
			 */
			protected function initLineChart():void{
				_ml = null;
				_vis.x = 80;
				_vis.y = 10;
				_vis.setAspectRatio(2.2,700);
				
				//Defaults
				//_vis.data.nodes.setDefault("shape","verticalBar");
				_vis.data.nodes.setDefault("fillColor",Colors.rgba(50,50,250,200));
				_vis.data.edges.setDefault("lineColor",Colors.rgba(50,50,250,200));
				_vis.data.nodes.setDefault("lineAlpha",0);
				_vis.data.nodes.setDefault("size",0.4);
				_vis.data.edges.setDefault("lineWidth",4);
				_vis.data.edges.setDefault("lineAlpha",0.8);
				
				
				//Controls
				_vis.controls.add(new TooltipControl(NodeSprite,null,updatePlotTip,updatePlotTip));
				
				//Operators
				_vis.operators.add(new AxisLayout("data.date","data.rate"));
				(_vis.operators[0] as AxisLayout).xScale.scaleType = "linear";
				(_vis.operators[0] as AxisLayout).yScale.scaleType = "linear";
				(_vis.operators[0] as AxisLayout).yScale.zeroBased = true;
				(_vis.operators[0] as AxisLayout).xScale.labelFormat = "{0:D}";
				
				loadData();	
			}
			
			protected function initMap():void{		
				_vis.setAspectRatio(2.1,800);	
				_vis.x = 0;
				
				//Defaults
				_vis.data.nodes.setProperty("shape","circle");
				_vis.data.nodes.setDefault("fillAlpha",0);
				_vis.data.nodes.setDefault("lineWidth",5);
				_vis.data.nodes.setDefault("lineColor",Colors.rgba(50,50,250,200));
				
				//Controls
				var ttc:TooltipControl  = new TooltipControl(NodeSprite,null,updateMapTip,updateMapTip);
				TextSprite(ttc.tooltip).text = "Tooltip Text";
				_vis.controls.add(ttc);
				
				//Operators
				var ml:MapLayout = _ml = new MapLayout();
				ml.xField = "data.longitude";
				ml.yField = "data.latitude";
				ml.desaturated = true;
				ml.xScale.preferredMin = -122.2580;
				ml.xScale.preferredMax = -122.2570;
				ml.yScale.preferredMin = 37.8745;
				ml.yScale.preferredMax = 37.8755;
				
				_vis.operators.add(ml);
				_vis.operators.add(new SizeEncoder("data.rate"));
				
				var lb:Labeler = new Labeler();
				lb.textFunction = function(d:DataSprite):String{
					return Strings.format("{0} - {1}",d.data.rate,String(d.data.date).substr(11,5));};
				lb.textFormat = new TextFormat("Verdana",18,Colors.gray(0),true);
				lb.xOffset =20;
				lb.horizontalAnchor = TextSprite.LEFT;
				
				_vis.operators.add(lb);
				
				loadData();
			}
			
			//----------------------------Tooltip Handlers--------------------------
			
			
			protected function updateMapTip(e:TooltipEvent):void{
				TextSprite(e.tooltip).htmlText = Strings.format(
					"<b>{0}</b><br/>{1}: {2} {3}  ",
					e.node.data["name"],
					e.node.data["displayName"],
					e.node.data["rate"],
					e.node.data["rateUnits"]);
			} 

			protected function updatePlotTip(e:TooltipEvent):void{
				TextSprite(e.tooltip).htmlText = Strings.format(
					"<b>{0}</b> - {1}",
					e.node.data["date"],
					e.node.data["rate"]);
			}
			
			
			
			//------------------------------Query Tools----------------------------------
						
			[Embed("assets/phone.png")]
            private var mobileIcon:Class;
			
			public const RESOURCE_TYPES:Array = [{label:"Energy Use",data:"energy"},
			{label:"Steam Use",data:"steam"},
			{label:"Water Use",data:"water"}];
			public const BUILDING_NAMES:Array = [
				{label:"This Area (Mobile)",data:-1, icon:mobileIcon},
				{label:"Cory Hall",data:55},
				{label:"Koshland Hall",data:142},
				{label:"Life Sciences Addition",data:24},
				{label:"Silver Lab Addition",data:160},
				{label:"Soda Hall",data:31},
				{label:"Tan Hall",data:153},
				{label:"Wurster Hall",data:143}];
			public const DATE_RANGES:Array = ["Daily","Weekly","Yearly","All Time"];
						
			
			protected var _currentDate:Date = new Date();
			[Bindable]
			protected var _resourceTypes:ArrayCollection = new ArrayCollection(RESOURCE_TYPES);
			[Bindable]
			protected var _buildingNames:ArrayCollection = new ArrayCollection(BUILDING_NAMES);
			[Bindable] 
			protected var _dateRanges:ArrayCollection = new ArrayCollection(DATE_RANGES);
					
					
			/**
			 * Method for selecting date ranges using the date chooser.
			 */			
			protected function selectDate(de:Event=null):void{
				var clickedDate:Date = (_dateChooser.dropdown.selectedDate ? _dateChooser.dropdown.selectedDate : _selectedDateRange[0].rangeStart);;
				
				switch(_dateRangeCombo.selectedLabel){
					case "Weekly":
						var dayOfWeek:Number = clickedDate.day;
						_selectedDateRange = [ {rangeStart: new Date(clickedDate.time-dayOfWeek*MILLISECONDS_PER_DAY), 
							rangeEnd: new Date(clickedDate.time+(6-dayOfWeek)*MILLISECONDS_PER_DAY)}];
						break;
					case "Yearly":
						_selectedDateRange = [ {rangeStart: new Date(clickedDate.fullYear,0), rangeEnd: new Date(clickedDate.fullYear,11,31)}]; 
						break;
					case "All Time":
						_selectedDateRange = [ {rangeStart: new Date(1970,0,0), rangeEnd: new Date(_currentDate.fullYear,11,31)}];
						break;
					case "Daily":
						_selectedDateRange = [ {rangeStart: clickedDate, rangeEnd: new Date(clickedDate.time + MILLISECONDS_PER_DAY)}];
						
					default:
						break;
				}
				if(_selectedDateRange){
					_dateChooser.dropdown.selectedRanges = _selectedDateRange;
					loadData();
				}
				
			}
			
			/**
			 * Method for properly formatting the date shown in the bar at the 
			 * top of the screen depending on the current date selection.
			 * 
			 */
			protected function dateForTop(dateRange:Object):String{
				var start:Date = (dateRange.rangeStart as Date);
				var end:Date = (dateRange.rangeEnd as Date);
				switch(_dateRangeCombo.selectedLabel){
					case "Weekly":
						return Strings.format("{0:d}-{1:d}",start,end);
						break;
					case "Yearly":
						return start.fullYear.toString();
						break;
					case "All Time":
						return "";
						break;
					case "Daily":
					default:
						return start.toDateString();
						break;
				}
			}
			
			
			protected function formatDateForQuery(date:Date):String{
				return (date.fullYear + "-" + (date.monthUTC < 9?"0":"") + (date.monthUTC+1) + 
						"-" + (date.dateUTC < 9?"0":"") + date.dateUTC);
			}
			
			
			protected function updateVis():void{
				if(_vis) _vis.update();
			}
			
			
			protected function showDistanceBox(value:Boolean):void{
				distanceBox.includeInLayout = value;
				distanceBox.visible = value;
			}
			
			
		]]>
	</mx:Script>
	<mx:Style source="css/MobileCSS.css"/>
	
	
</mx:Application>
